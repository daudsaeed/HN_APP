import 'dart:convert';

import 'package:flutter_test/flutter_test.dart';
import 'package:hacker_new/src/json_parsing.dart';
import 'package:http/http.dart' as http;

void main() {
  test("Json Parsing top Stories", () {
    const jsonString =
        """ [ 32878560, 32877814, 32877435, 32876303, 32878112, 32876982, 32879057, 32876748, 32876804, 32876988, 32875396, 32865098, 32876866, 32866488, 32865510, 32877928, 32878366, 32875246, 32874970, 32864347, 32876773, 32862697, 32875995, 32876015, 32876302, 32877942, 32856009, 32864851, 32876163, 32876449, 32875849, 32879111, 32875983, 32876954, 32866256, 32870714, 32878115, 32862803, 32851196, 32874311, 32864994, 32874086, 32850016, 32873904, 32873535, 32877689, 32878853, 32873563, 32865497, 32873517, 32877121, 32876634, 32877036, 32857349, 32878705, 32876241, 32873017, 32870677, 32874597, 32876899, 32859256, 32860728, 32862333, 32861348, 32848010, 32878502, 32874189, 32871392, 32862285, 32867584, 32870463, 32850670, 32865311, 32868640, 32878010, 32865229, 32874721, 32863489, 32862597, 32867644, 32872449, 32874046, 32875795, 32878156, 32874383, 32877024, 32864997, 32867737, 32876557, 32872980, 32875465, 32854701, 32870849, 32877992, 32843842, 32876987, 32856333, 32867613, 32864413, 32844724, 32866892, 32868092, 32876859, 32871856, 32850178, 32868377, 32871077, 32860664, 32862421, 32871799, 32865428, 32866319, 32854746, 32873899, 32839754, 32865194, 32875976, 32865082, 32857555, 32873005, 32876805, 32870146, 32870727, 32868512, 32864719, 32866350, 32864218, 32850971, 32867299, 32866093, 32861024, 32862672, 32862915, 32868091, 32852643, 32871328, 32850856, 32866188, 32849592, 32860185, 32865340, 32860778, 32864783, 32848575, 32858400, 32848110, 32864431, 32863076, 32855476, 32841975, 32875342, 32864267, 32875469, 32875404, 32865304, 32865786, 32871389, 32871837, 32866055, 32865780, 32870050, 32868025, 32845229, 32842749, 32868823, 32866943, 32864909, 32861075, 32872727, 32861450, 32847192, 32859188, 32859415, 32870836, 32855492, 32872788, 32864119, 32874765, 32872554, 32865867, 32864656, 32849962, 32862267, 32875331, 32872433, 32857161, 32869761, 32864598, 32842860, 32852478, 32876179, 32865742, 32868316, 32875752, 32843477, 32868743, 32852425, 32867662, 32865976, 32849145, 32842484, 32864052, 32854334, 32866948, 32867515, 32861788, 32858903, 32872965, 32857429, 32873391, 32851591, 32875053, 32844368, 32846691, 32876299, 32870690, 32856034, 32843841, 32843145, 32843892, 32868134, 32873000, 32844850, 32850799, 32841737, 32875375, 32863933, 32842192, 32841069, 32859464, 32873499, 32847052, 32873810, 32842357, 32845512, 32872362, 32874305, 32843961, 32840369, 32854528, 32851262, 32870353, 32839796, 32840097, 32853239, 32858371, 32866940, 32869885, 32851422, 32866763, 32873960, 32851848, 32872927, 32866900, 32842651, 32844486, 32859438, 32863774, 32861765, 32864721, 32844130, 32850274, 32856678, 32844485, 32864810, 32875945, 32868622, 32861760, 32847987, 32862726, 32868449, 32861262, 32874687, 32863175, 32842814, 32852020, 32872685, 32849922, 32849769, 32840060, 32872437, 32875184, 32854718, 32872759, 32864591, 32868024, 32855747, 32844663, 32869684, 32865897, 32855988, 32864743, 32853403, 32842295, 32867818, 32865413, 32844854, 32872161, 32867646, 32859108, 32865593, 32867214, 32851572, 32850849, 32862549, 32871051, 32840583, 32864094, 32873924, 32861148, 32846124, 32849309, 32872865, 32865680, 32846143, 32872509, 32867762, 32852678, 32854616, 32870121, 32853238, 32851059, 32854967, 32865803, 32863565, 32872770, 32872131, 32842207, 32870217, 32866481, 32859717, 32851374, 32858305, 32871706, 32844350, 32867760, 32873186, 32865905, 32855963, 32858501, 32871031, 32856779, 32858698, 32848112, 32841183, 32861968, 32862713, 32846679, 32861780, 32850789, 32871938, 32864341, 32869154, 32861419, 32866109, 32873490, 32854614, 32861663, 32847031, 32853918, 32873281, 32842816, 32858427, 32867731, 32842041, 32867516, 32863217, 32859472, 32849615, 32859701, 32872966, 32872899, 32870115, 32840367, 32843460, 32859115, 32850635, 32858809, 32847141, 32841016, 32863401, 32849120, 32844810, 32846090, 32860093, 32868711, 32849506, 32851256, 32871742, 32851367, 32865058, 32851094, 32859263, 32855661, 32839696, 32863671, 32852218, 32840505, 32855883, 32871432, 32867375, 32845142, 32867196, 32866967, 32854135, 32839943, 32870670, 32843078, 32870411, 32864099, 32870110, 32870018, 32869951, 32859786, 32843348, 32874995, 32869739, 32869735, 32872843, 32850376, 32869450, 32863485, 32865116, 32868974, 32863181, 32860290, 32840864, 32855814, 32850560, 32868247, 32856237, 32868107, 32848783, 32843586, 32867755, 32842300, 32842320, 32840645, 32858989, 32853779, 32860887, 32859783, 32866976, 32849204, 32863977, 32855594, 32872223, 32866837, 32852538, 32857802, 32846840, 32866006, 32853470, 32865728, 32859080, 32863124, 32846202, 32845196, 32865456, 32869790, 32845554, 32856563, 32843854, 32860393, 32862397, 32843913, 32843814, 32841014, 32843442, 32862025, 32845434, 32851976, 32861907, 32849325, 32840639, 32841986, 32873262, 32858741, 32841198, 32863910, 32848045, 32875846, 32858139, 32870903, 32846622, 32843048, 32861111, 32842657, 32860733, 32841195, 32858144, 32863117, 32860205, 32863070, 32842369, 32859827, 32862866, 32861804, 32842037, 32849258 ]""";

    expect(topStoryParse(jsonString).first, 32878560);
  });

  test("Parsing a item", () {
    const jsonString =
        """ {"by":"dhouston","descendants":71,"id":8863,"kids":[9224,8917,8952,8958,8884,8887,8869,8873,8940,8908,9005,9671,9067,9055,8865,8881,8872,8955,10403,8903,8928,9125,8998,8901,8902,8907,8894,8870,8878,8980,8934,8943,8876],"score":104,"time":1175714200,"title":"My YC app: Dropbox - Throw away your USB drive","type":"story","url":"http://www.getdropbox.com/u/2/screencast.html"}""";
    expect(parseItem(jsonString).by, "dhouston");
  });

  test("parsing a top stories over a network", () async {
    final url =
        Uri.parse("https://hacker-news.firebaseio.com/v0/beststories.json");
    final res = await http.get(url);
    if (res.statusCode == 200) {
      expect(topStoryParse(res.body).first, 32850178);
    }
  });

  test("Parsing the item over a network", () async {
    final url =
        Uri.parse("https://hacker-news.firebaseio.com/v0/beststories.json");
    final res = await http.get(url);
    if (res.statusCode == 200) {
      final listOfIds = json.decode(res.body);
      if (listOfIds.isNotEmpty) {
        final urlForTheItem = Uri.parse(
            'https://hacker-news.firebaseio.com/v0/item/${listOfIds.first}.json');
        final itemRes = await http.get(urlForTheItem);
        if (itemRes.statusCode == 200) {
          expect(parseItem(itemRes.body), isNotNull);
        }
      }
    }
  });
}
